Line 
	Written by: Iman Abdollahzadeh
	C# source code
	A free, portable, and easy-to-use software to generate a PDF output file
	from a '.line' source file.

.line
	This is the extension for a binary file containing all the source code for the 
	document. 

syntax
	in every .line file, there are several tokens e.g. title__, body___, etc.
	They must be written in a '[]'. For instance if we would like to have a document with the title of
	"The Main Title", we have to make such a code in .line file:
		[title__]The Main Title[]

tutorial
	- all commands must be finished with an empty []
	- all sentences in the .line file must be wrapped by two tokens in [].

		The title sentence goes like this:  [title__]...[]
		The body sentence goes like this:   [body___]...[]
		The bullet sentence goes like this: [bullet_]...[]

		> if you forget the closing token [], you'll get an error and crash
	- There should be NO enter between token lines. 
		> For example this is an error:
			[bullet_]lablablab[]

			[body__]something else[]

		> and this is the correct way of doing it:

			[bullet_]lablablab[]
			[body__]something else[]

		- To insert a new line, user should make two Enters in .line file. 
			> For example:
				[body__]Pioneering studies in yeast have led to the identification of a core machinery 	 => output: Pioneering studies in yeast have led to the identification of a core machinery of autophagy-related (ATG) proteins
				of autophagy-related (ATG) proteins[]													 
																										 
				and 																					 
																										 
				[body__]Pioneering studies in yeast have led to the identification of a core machinery 	 => output: Pioneering studies in yeast have led to the identification of a core machinery
																													of autophagy-related (ATG) proteins

				of autophagy-related (ATG) proteins[]
	
Example
	test.line
		> [title__]Autophagy-related Protein ATG8[]
		> [body___]Macroautophagy is a procces by which
		> all proteins in mammalian cells, break their lumen sides.
		> There are two different categories for these proteins:
		>
		>	Ellipse: related to the elongation phase
		>
		>	U-shape: related to the initiation (phagophore formation)[]

Tokens
	[title__] : insert a title  
	[subtit_] : insert a subtitle (without chapter number)
	[body___] : accepts the body (or the regular sentences) of the text	    
	[blnkpg_] : insert a new blank page
	[pgNum1_] : set page numbers to mode I  (see "Page number insertion" section below for more detail)
	[pgNum2_] : set page numbers to mode II (see "Page number insertion" section below for more detail)
	[formul_] : insert a new line of formula
	[image__] : inserts a generic image (i.e. does not matter if it is .png, .jpg, or .bmp) in the middle of the page


Special characters insertion in .line file
	The following special characters must be given in &<xx>& format
	where xx is a two-digits number starting from 00 up to 99
	&<00>& : α
	&<01>& : β
	&<02>& : γ
	&<03>& : δ
	&<04>& : γ
	&<05>& : ε
	&<06>& : ζ
	&<07>& : η
	&<08>& : θ
	&<09>& : ι
	&<10>& : κ
	&<11>& : λ
	&<12>& : μ
	&<13>& : ν
	&<14>& : ξ
	&<15>& : ο
	&<16>& : π
	&<17>& : ρ
	&<18>& : ς
	&<19>& : σ
	&<20>& : τ
	&<21>& : υ
	&<22>& : φ
	&<23>& : χ
	&<24>& : ψ
	&<25>& : ω
	&<26>& : ϊ
	&<27>& : ϋ
	&<28>& : ό
	&<29>& : ύ
	&<30>& : ώ
	&<31>& : ϐ
	&<32>& : ϑ
	&<33>& : Α
	&<34>& : Β
	&<35>& : Γ
	&<36>& : Δ
	&<37>& : Ε
	&<38>& : Ζ
	&<39>& : Η
	&<40>& : Θ
	&<41>& : Ι
	&<42>& : Κ
	&<43>& : Λ
	&<44>& : Μ
	&<45>& : Ν
	&<46>& : Ξ
	&<47>& : Ο
	&<48>& : Π
	&<49>& : Ρ
	&<50>& : Σ
	&<51>& : Τ
	&<52>& : Υ
	&<53>& : Φ
	&<54>& : Χ
	&<55>& : Ψ
	&<56>& : Ω
	&<57>& : Ϊ
	&<58>& : Ϋ
	&<59>& : ά
	&<60>& : έ
	&<61>& : ή
	&<62>& : ί
	&<63>& : ΰ
	&<64>& : ∞
	&<65>& : •

Subscript and superscript
The format for insertion both sub- and superscripts are as follows:
	(sub)(any text here)
	(sup)(any text here)
where "any text here" is the desired text which should be sub- or superscripted.

Example
test.line
	> [title__]This is the (sub)(subscript) title which goes here[]
	> [body___]Autophagy is a homeostatic process, which enables cells to survive under conditions of
	> stress and starvation. It plays an important role both for basal turnover of intracellular
	> proteins and organelles and for maintenance of homeostasis under stress conditions such as
	> nutrient or oxygen deprivation. The formation of a cup-shaped double membrane structure
	> (the phagophore), which expands to engulf its cargo and form an autophagosome is the unique
	> hallmark of autophagy. Pioneering studies in yeast have led to the identification of a core machinery
	> of autophagy-related (ATG) proteins, and most of these were found to be conserved in mammalian cells.
	> For instance, autophagosome formation critically depends on the ATG8 family of small ubiquitin-like
	> proteins. In human cells, the ATG8 family consists of six members grouped into two subfamilies
	> including GABARAP-type and LC3-type proteins respectively. Given the size of the intracellular
	> ATG8-positive structures (50 nm to 1.5 &<12>&m), which is on the order of the wavelength of visible
	> light or well below, the distribution of proteins on these organelles cannot be resolved by conventional
	> fluorescence microscopy. Using Single Molecule Localization Microscopy.[]

Page number insertion
	There are two general modes for page numbers
		1. mode 1: all pages is decorated with numerical page numbers including blank pages
		2. mode 2: completely manual way of counting based on the user inputs (here blank pages are left without numbers, but their counts have been included)

	Page number token: 
	[pgNum1_] : insertion  of mode 1 of numbering
	[pgNum2_] : insertion of manual mode 2 of numbering

	Page numbering tutorial:
		-First, the user make the whole document without insertion of any page numbering tokens.
		-The very last line of the .line file must be [pgNum1_][].
		-The output pdf file will give the user a comprehensive, general, everything-counted view of the file.
		-Then user will take notes of which pages to have roman-style numbering, which ones have the numerical counts and blank pages left without numbering.
		- The last step is done as follows:
			> delete the last line of the .line file which is [pgNum1_][]
			> and instead write [pgNum2_]...[] 
			> where ... is the format for given pages and their numbering style. For instance user would like to have page 1 to 4 as roman sequence (i, ii, iii, iv)
			> and then page 5 as the number (that is 5), pages 6 and 7 are blank and then again pages 8 to 14 as numeric style. This is how it is done:
			> [pgNum2_]num:5-5.rmn:1-4.num:8-14.[]

		Warnings: 
		1. Never have a .line file with both [pgNum1_] and [pgNum2_] tokens together
		2. Never leave a [pgNum2_] token without any given page-numbering format inside brackets, otherwise it will crash
		3. Giving page number out of range, will lead to no crash or any undefined behaviour. It is safe
		4. The final '.' at the very end of [pgNum2_][] never forgets

Formula (including integration and summation, but no fraction support)
	formula support have been implemented in a generic way meaning the user can have one line of formula consists of these three categories:
		- integrals
		- summations
		- simple text

		> so far there is no support for fractional statements (comming soon).

	In order to implement a formula, one should use token [formul_] ... []

	Ex. [formul_]BDY.HH + .SUM.i = 0,i = N, H(i) + N + .INT.10,1000,f(x)dx.[]
		important teature is '.' and keywords in the body of formula.
		They are BDY, SUM, and INT.
		BDY = this is a simple formula such as any plain, simple math equation
		SUM = the Sigma symbol
		INT = the integration symbol

		> SUM: if you's like to implement a sigma statement with lower and upper directives plus the main functionality in front of it do like this:
			Ex. SUM.i = 0,i = N, H(i) + N    => this means Sigma of H(i) + N, when sigma goes from 0 to N with index i.
			If you give lower and upper directives "nul", then in the formula there is no lower and upper directives
			
		> INT: This way you can implement an integration statement with lower and upper directives plus the main functionality in front of it:
			Ex. INT.10,1000,f(x)dx   => this means Integral of f(x)dx, from 10 to 1000. 
			Note that, like sigma, giving "nul" as lower and upper bands of integral, prints no symbol or directive in pdf file.
		
	Warnings: 
		1. The final '.' at the very end of [formul_][] never forgets

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

The Concept of Graphical Objects in Line:
	- What does it mean when we say Graphical Object?
		+ One of the major issues that should have been addressed is the implementation of complicated formula or
		mathematical expressions. This is more than showing a linear formula like integrals, summations and fractions.
		We noticed that it is almost impossible to have for instance one summation with either its down or up expression 
		be another sophisticated math expression, implementation.
		Then we need a platform to draw everything we need in our math expressions to be drawn in a customized way.
		This is why this technique is called Graphical since we have access to a page as a graphical context. It has been 
		controlled very carefully how and where to draw the user's input as a sophisticated math expression.
		The term Object means that it coveres not only simple text or symbolic formats, but also another Graphical Object.
		In fact this is a generic way of math expression implementation when the input for an expression could be another
		expression per se.
	- Which specific problem GObjects make if not properly be used?
		+ The cost of using GObjects for any reason is that the rendering phase takes longer time to get completed.
		This make is really specific when to use them as the way of construting mathexpressions.
		For instance, if one can do the job with te use of simple texts or math expression with maximum level 0, it would be
		not wise to use GObjects. But in case, user only needs them to construct the expression, that should be the very advance way
		of implementation.
	- Is there a way that user can get in touch with GObjects from .Line file?
		+ Of course there is. As said before, only integral, summation and fractions have been by default implemented with the use of GObjects,
		but user can start to think of making new expressions in so-calles "SudB" manner and use them later exactly like other GObjects.
		To do so, first user has to declare the needed expression with only two parameters. First, a given name and second, a symbol.
		Let's think of exponential as a new math expression that we'd like to make as GObject. The name could be EXP, and the symbol would be "e".
		In this way, user had been completely able to intract with the GObject and tries to modify its default table of objects.
	- Which new tokens have been dedicated for GObject usage?
		+ As a rule, all GObject commands start with "GO" in their beginning. Like all other tokens, they must be wrapped in []
		and the command should be terminated with an empty [].
		The new set of GObjects relarted tokens are:
			> [GOForm_] and [GOReg__]
			>> GoForm_, is simply the way to let Line gets the expression as GO stands for GObject (or Graphical Object) 
			and Form stands for formula, so in total it means "Graphical Object-approach for formula"
			>> GOReg__ is the registration of a new expression making by user (see above in exponential example).
	- How syntactically the new GObject tokens work?
		+ [GOReg__]_SYMBOL_,_NAME_.[]
		_SYMBOL_ basically is a symbol that user would like to give such as "e" or "log" or even "USER_SYMBOL", and
		_NAME_ is a command name that user can later on call in .Line file in order to construct the expression. For instance
		EXP, or LOG, or USS which could be stood for exponential, logarithm, and user_symbol in the case of above provided examples.
		
		+[GOForm_]INT.f(x)dx,{INT.g(x - 1)dx,1,0;},-&<64>&;[]
		Like normal formula we have INT. which is the declaration of integral.
		f(x)dx is the body of integral, then comes a GObject wrapped in {}, as the upper part of integral, which is another math expression and MUST be terminated with ;
		and last is the lower part of the integral, that can be a text or another GObject like {SUM.1,i = 0,Ni;}
	>>> One example for GObject usage:
		- suppose we have a command like below in our .Line file:
		[GOForm_]SUM.H(i) + N + ,{INT.f(x)dx,1,0;},{SUM.i + &<14>&N,+&<64>&,i = 0;};INT.f(y)dy,{INT.f(z)dz,1,0;},0;[]
		In order to see the result, please look at the attached GObject_demonstration.png file
Now that we understood how Graphical Objects (or GObject) work, this is the time to explain how to use them in order to make very
complicated formula.
We found a generic way of representing any formula based on GObject, so that, one can always show a typical formula as:

SudB:
where S is the main symbol of a math expression such as Summation, or fraction, or integral.
u is the upper object.
d is the down object.
and B is the body of the expression.
the whole SudB is one GObject. u and d are themselves also GObjects which have again their u and d.
Usually B is a text based math expression without any sophisticated symbol.

The beauty of such a strategy is that one can easily create a formula expression like a Sigma symbol where either of u or d can be
another formula expression. For clarity consider an integral symbol with up a sigma expression with its own property and down a
number or even another expression like a fraction and so on.

In the first try in this strategy, we made a simple protocol. In this protocol if the GObject is in Level 0 
which means is the mother expression, the font sizes of S, u, d, and B are 18, 8, 8, and 12 respectively.
If the GObject is in Level 1 (for instance the up expression for a mother integral) 
which means is the child expression, the font sizes of S, u, d, and B are 10, 4, 4, and 8 respectively.
We could expand such a scenario evenfor higher levels, but it is much more of coding (but still possible).

So, we say that the user is limited to levels 0 and 1 at his time, and upon necessity for higher levels, should call us for support.
Not to mention that GObject approach of displaying math expressions are really expensive in terms of speed of ciompilation and creation, and this is another main reason 
that we did not implement leves higher than 1 at this time.

- Another very powerful capability of GObject approach is creation of custom expressions from user side. 
By default we implemented Integral, Summation, and Fraction in the code, but there is always a way for the user to create (properly) a
custom matjh expression like Exponential or Logarithmic expressions. To make it simple at this moment, the user
should once in the bginning of the creation of any expresion in the .Line file, register the expression based on the protocol below and later use it 
like all other already implemented symbols like Summation, etc.

- Custom made math expression based on GObject approach:
	+ 
	+ 



